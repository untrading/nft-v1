{
  "address": "0xE9a66f7c67878cFC79453F4E65b39e98De934D5a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "untradingManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "managerCut",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__InvalidInitializationParameters",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__RemoveTargetNotZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__ReplaceTargetIsIdentical",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__SelectorAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__SelectorIsImmutable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__SelectorNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__SelectorNotSpecified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__TargetHasNoCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC165Base__InvalidInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ownable__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ownable__NotTransitiveOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Proxy__ImplementationIsNotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeOwnable__NotNomineeOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondWritableInternal.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondWritableInternal.FacetCut[]",
          "name": "facetCuts",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondWritableInternal.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondWritableInternal.FacetCut[]",
          "name": "facetCuts",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "selectors",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondReadable.Facet[]",
          "name": "diamondFacets",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFallbackAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "fallbackAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nomineeOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fallbackAddress",
          "type": "address"
        }
      ],
      "name": "setFallbackAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x38d840e5dfa7a69731cdc96c4f8eae50a035e144cdad102aeb0136a9fd30b398",
  "receipt": {
    "to": null,
    "from": "0xD43bCD14529099f141897CBb522Ef6197f4b1Cae",
    "contractAddress": "0xE9a66f7c67878cFC79453F4E65b39e98De934D5a",
    "transactionIndex": 10,
    "gasUsed": "2400643",
    "logsBloom": "0x
    "blockHash": "0xdc46061df3fa44577aaac6be91a4affdccfe7cb5b2936b7897d5c8eaf2e2cffa",
    "transactionHash": "0x38d840e5dfa7a69731cdc96c4f8eae50a035e144cdad102aeb0136a9fd30b398",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 30723585,
        "transactionHash": "0x38d840e5dfa7a69731cdc96c4f8eae50a035e144cdad102aeb0136a9fd30b398",
        "address": "0xE9a66f7c67878cFC79453F4E65b39e98De934D5a",
        "topics": [
          "0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000e9a66f7c67878cfc79453f4e65b39e98de934d5a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000c2c4080590000000000000000000000000000000000000000000000000000000091423765000000000000000000000000000000000000000000000000000000001f931c1c000000000000000000000000000000000000000000000000000000007a0ed62700000000000000000000000000000000000000000000000000000000adfca15e0000000000000000000000000000000000000000000000000000000052ef6b2c00000000000000000000000000000000000000000000000000000000cdffacc60000000000000000000000000000000000000000000000000000000001ffc9a7000000000000000000000000000000000000000000000000000000008da5cb5b000000000000000000000000000000000000000000000000000000008ab5150a00000000000000000000000000000000000000000000000000000000f2fde38b0000000000000000000000000000000000000000000000000000000079ba5097000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 28,
        "blockHash": "0xdc46061df3fa44577aaac6be91a4affdccfe7cb5b2936b7897d5c8eaf2e2cffa"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 30723585,
        "transactionHash": "0x38d840e5dfa7a69731cdc96c4f8eae50a035e144cdad102aeb0136a9fd30b398",
        "address": "0xE9a66f7c67878cFC79453F4E65b39e98De934D5a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d43bcd14529099f141897cbb522ef6197f4b1cae"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0xdc46061df3fa44577aaac6be91a4affdccfe7cb5b2936b7897d5c8eaf2e2cffa"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 30723585,
        "transactionHash": "0x38d840e5dfa7a69731cdc96c4f8eae50a035e144cdad102aeb0136a9fd30b398",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d43bcd14529099f141897cbb522ef6197f4b1cae",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000ccb0ee1df0d0000000000000000000000000000000000000000000000000003ecce41d3ae81e80000000000000000000000000000000000000000000009c32a7ad4572e365b7b00000000000000000000000000000000000000000000000003e00332f1cf74e80000000000000000000000000000000000000000000009c32a879f661015687b",
        "logIndex": 30,
        "blockHash": "0xdc46061df3fa44577aaac6be91a4affdccfe7cb5b2936b7897d5c8eaf2e2cffa"
      }
    ],
    "blockNumber": 30723585,
    "cumulativeGasUsed": "3923039",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD43bCD14529099f141897CBb522Ef6197f4b1Cae",
    "0",
    "untrading Shared Contract",
    "unNFT",
    ""
  ],
  "numDeployments": 1,
  "solcInputHash": "a44d8b64925f4bc2b5e597a58dadba61",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"untradingManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"managerCut\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DiamondWritable__InvalidInitializationParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__RemoveTargetNotZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__ReplaceTargetIsIdentical\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorIsImmutable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorNotSpecified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__TargetHasNoCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC165Base__InvalidInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable__NotTransitiveOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Proxy__ImplementationIsNotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeOwnable__NotNomineeOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondWritableInternal.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondWritableInternal.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondWritableInternal.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondWritableInternal.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondReadable.Facet[]\",\"name\":\"diamondFacets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFallbackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fallbackAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nomineeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fallbackAddress\",\"type\":\"address\"}],\"name\":\"setFallbackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"data\":\"optional initialization function call data\",\"facetCuts\":\"array of structured Diamond facet update data\",\"target\":\"optional target of initialization delegatecall\"}},\"facetAddress(bytes4)\":{\"params\":{\"selector\":\"function selector to query\"},\"returns\":{\"facet\":\"facet address (zero address if not found)\"}},\"facetAddresses()\":{\"returns\":{\"addresses\":\"array of facet addresses\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"facet\":\"address of facet to query\"},\"returns\":{\"selectors\":\"array of function selectors\"}},\"facets()\":{\"returns\":{\"diamondFacets\":\"array of structured facet data\"}},\"getFallbackAddress()\":{\"returns\":{\"fallbackAddress\":\"address of fallback implementation\"}},\"owner()\":{\"returns\":{\"_0\":\"conrtact owner\"}},\"setFallbackAddress(address)\":{\"params\":{\"fallbackAddress\":\"address of fallback implementation\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"transferOwnership(address)\":{\"params\":{\"account\":\"address of new owner\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"accept transfer of contract ownership\"},\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"update diamond facets and optionally execute arbitrary initialization function\"},\"facetAddress(bytes4)\":{\"notice\":\"get the address of the facet associated with given selector\"},\"facetAddresses()\":{\"notice\":\"get addresses of all facets used by diamond\"},\"facetFunctionSelectors(address)\":{\"notice\":\"get all selectors for given facet address\"},\"facets()\":{\"notice\":\"get all facets and their selectors\"},\"getFallbackAddress()\":{\"notice\":\"query the address of the fallback implementation\"},\"nomineeOwner()\":{\"notice\":\"get the nominated owner who has permission to call acceptOwnership\"},\"owner()\":{\"notice\":\"get the ERC173 contract owner\"},\"setFallbackAddress(address)\":{\"notice\":\"set the address of the fallback implementation\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"transferOwnership(address)\":{\"notice\":\"transfer contract ownership to new account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/unDiamond.sol\":\"unDiamond\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@drad/eip-5173-diamond/contracts/nFR/InFR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@solidstate/contracts/interfaces/IERC165.sol\\\";\\n\\n/*\\n *\\n * @dev Interface for the Future Rewards Token Standard.\\n *\\n * A standardized way to receive future rewards for non-fungible tokens (NFTs.)\\n *\\n */\\ninterface InFR is IERC165 {\\n\\n    event FRClaimed(address indexed account, uint256 indexed amount);\\n\\n    event FRDistributed(uint256 indexed tokenId, uint256 indexed soldPrice, uint256 indexed allocatedFR);\\n\\n    event Listed(uint256 indexed tokenId, uint256 indexed salePrice);\\n\\n    event Unlisted(uint256 indexed tokenId);\\n\\n    event Bought(uint256 indexed tokenId, uint256 indexed salePrice);\\n\\n    function list(uint256 tokenId, uint256 salePrice) external;\\n\\n    function unlist(uint256 tokenId) external;\\n\\n    function buy(uint256 tokenId) payable external;\\n\\n    function releaseFR(address payable account) external;\\n\\n    function getFRInfo(uint256 tokenId) external returns(uint8, uint256, uint256, uint256, uint256, address[] memory);\\n\\n    function getAllottedFR(address account) external returns(uint256);\\n\\n    function getListInfo(uint256 tokenId) external returns(uint256, address, bool);\\n    \\n}\",\"keccak256\":\"0x7d5846f8446586337037088bf85dd845d7106fff7c3e1d65d52c4d1f678f84dd\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\n\\ninterface IOwnable is IERC173 {}\\n\",\"keccak256\":\"0xd2d21c507ed587cd5de6cc016d4b9c7e956e468108b784455a400301707031c1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/IOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from '../../interfaces/IERC173Internal.sol';\\n\\ninterface IOwnableInternal is IERC173Internal {\\n    error Ownable__NotOwner();\\n    error Ownable__NotTransitiveOwner();\\n}\\n\",\"keccak256\":\"0x6237a634712261bd82d5c7753780d35f77af215406d1e59512052f743f8f1c60\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/ISafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IOwnable } from './IOwnable.sol';\\n\\ninterface ISafeOwnable is IOwnable {\\n    /**\\n     * @notice get the nominated owner who has permission to call acceptOwnership\\n     */\\n    function nomineeOwner() external view returns (address);\\n\\n    /**\\n     * @notice accept transfer of contract ownership\\n     */\\n    function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x6d321531723ca42e2492dbee44c64c75e454b234bf770f74151819fecdc5870a\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/ISafeOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\n\\ninterface ISafeOwnableInternal is IOwnableInternal {\\n    error SafeOwnable__NotNomineeOwner();\\n}\\n\",\"keccak256\":\"0xd5d44576a2f82b4ffdcf29feec6043e82436011784d92567a968609aa49a0f6b\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { IOwnable } from './IOwnable.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173\\n */\\nabstract contract Ownable is IOwnable, OwnableInternal {\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function transferOwnership(address account) public virtual onlyOwner {\\n        _transferOwnership(account);\\n    }\\n}\\n\",\"keccak256\":\"0xe16b09090c1251f8cc97fb2cc10c86675e0d0d9f0fc0032b417c37c8dba2db5f\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal is IOwnableInternal {\\n    using AddressUtils for address;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner()) revert Ownable__NotOwner();\\n        _;\\n    }\\n\\n    modifier onlyTransitiveOwner() {\\n        if (msg.sender != _transitiveOwner())\\n            revert Ownable__NotTransitiveOwner();\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transitiveOwner() internal view virtual returns (address owner) {\\n        owner = _owner();\\n\\n        while (owner.isContract()) {\\n            try IERC173(owner).owner() returns (address transitiveOwner) {\\n                owner = transitiveOwner;\\n            } catch {\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        _setOwner(account);\\n    }\\n\\n    function _setOwner(address account) internal virtual {\\n        OwnableStorage.Layout storage l = OwnableStorage.layout();\\n        emit OwnershipTransferred(l.owner, account);\\n        l.owner = account;\\n    }\\n}\\n\",\"keccak256\":\"0x0185d24250a5e6fbafce443b9ba19bba761803e3e5d91ba423bfb1f5f0bbdbf9\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7385e2020de914f75cabdc83c6adf88ed21e9de14669a89b3832b80f4f8c7b73\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { Ownable } from './Ownable.sol';\\nimport { ISafeOwnable } from './ISafeOwnable.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\nimport { SafeOwnableInternal } from './SafeOwnableInternal.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173 with ownership transfer safety check\\n */\\nabstract contract SafeOwnable is ISafeOwnable, Ownable, SafeOwnableInternal {\\n    /**\\n     * @inheritdoc ISafeOwnable\\n     */\\n    function nomineeOwner() public view virtual returns (address) {\\n        return _nomineeOwner();\\n    }\\n\\n    /**\\n     * @inheritdoc ISafeOwnable\\n     */\\n    function acceptOwnership() public virtual onlyNomineeOwner {\\n        _acceptOwnership();\\n    }\\n\\n    function _transferOwnership(\\n        address account\\n    ) internal virtual override(OwnableInternal, SafeOwnableInternal) {\\n        super._transferOwnership(account);\\n    }\\n}\\n\",\"keccak256\":\"0x84d5694ad1f6cc77170ec667b02080dca1ccdde26eddaf46960d95971df1a5f1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/SafeOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ISafeOwnableInternal } from './ISafeOwnableInternal.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\nimport { SafeOwnableStorage } from './SafeOwnableStorage.sol';\\n\\nabstract contract SafeOwnableInternal is ISafeOwnableInternal, OwnableInternal {\\n    modifier onlyNomineeOwner() {\\n        if (msg.sender != _nomineeOwner())\\n            revert SafeOwnable__NotNomineeOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @notice get the nominated owner who has permission to call acceptOwnership\\n     */\\n    function _nomineeOwner() internal view virtual returns (address) {\\n        return SafeOwnableStorage.layout().nomineeOwner;\\n    }\\n\\n    /**\\n     * @notice accept transfer of contract ownership\\n     */\\n    function _acceptOwnership() internal virtual {\\n        _setOwner(msg.sender);\\n        delete SafeOwnableStorage.layout().nomineeOwner;\\n    }\\n\\n    /**\\n     * @notice set nominee owner, granting permission to call acceptOwnership\\n     */\\n    function _transferOwnership(address account) internal virtual override {\\n        SafeOwnableStorage.layout().nomineeOwner = account;\\n    }\\n}\\n\",\"keccak256\":\"0x37c50898938e52163f6d42d6e03e845a131013c7bbbc90e5dc6c26dd89782e39\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/SafeOwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary SafeOwnableStorage {\\n    struct Layout {\\n        address nomineeOwner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.SafeOwnable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4818afb0b39e0770f881cbeaea1b1c77fba0daaa64bd8c1361d6e3a197628e93\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from './IERC173Internal.sol';\\n\\n/**\\n * @title Contract ownership standard interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173 is IERC173Internal {\\n    /**\\n     * @notice get the ERC173 contract owner\\n     * @return conrtact owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice transfer contract ownership to new account\\n     * @param account address of new owner\\n     */\\n    function transferOwnership(address account) external;\\n}\\n\",\"keccak256\":\"0x9b18a5ad66323c65a81ecd62c3536db99115fe69a30b56a04409de941da7deb6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC173Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC173 interface needed by internal functions\\n */\\ninterface IERC173Internal {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\",\"keccak256\":\"0x9644c3e56c9ecd1763f8aaa437d5d573a7f64a8d93ad7bea1a9c44beb5911b89\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC721Internal } from './IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721 is IERC721Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given address\\n     * @return balance quantity of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice query the owner of given token\\n     * @param tokenId token to query\\n     * @return owner token owner\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice grant approval to given account to spend token\\n     * @param operator address to be approved\\n     * @param tokenId token to approve\\n     */\\n    function approve(address operator, uint256 tokenId) external payable;\\n\\n    /**\\n     * @notice get approval status for given token\\n     * @param tokenId token to query\\n     * @return operator address approved to spend token\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given account to spend all tokens held by sender\\n     * @param operator address to be approved\\n     * @param status approval status\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return status whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool status);\\n}\\n\",\"keccak256\":\"0xa14655a5bdee327bc019b583b04480e8542fa6b0788e5569077ec54805d1463a\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC721 interface needed by internal functions\\n */\\ninterface IERC721Internal {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed operator,\\n        uint256 indexed tokenId\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x8d46d596fa0e48cdcbf8bb8d6a42120351c4d1b002156bf647f95523178cbe08\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165Base } from './IERC165Base.sol';\\nimport { ERC165BaseInternal } from './ERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165Base is IERC165Base, ERC165BaseInternal {\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return _supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3f2268856fdd9b27946adc65010bc83992069a90034bf692ab630802a926a9c2\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(bytes4 interfaceId, bool status) internal {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xba7b4d73d42dfc9f8083ce36aed0fa2c56c73878d8bda7d64f2fb908d5e04636\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1cfba40f8aabda5898ffe21adeeea8c7011da12bfdad7f7aa0cf87b3635653\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\n\\ninterface IERC165Base is IERC165, IERC165BaseInternal {}\\n\",\"keccak256\":\"0x288c50013c735cf30be90eb084589fc54bc0ee77a88ec69c3cc1efb11d7dccf4\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\",\"keccak256\":\"0xccda4b118c8c09c276a0e577168aa404ea6207aad6b384b04f5f3a8923316422\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IProxy {\\n    error Proxy__ImplementationIsNotContract();\\n\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x2a06657ce005059e60a0765fe090240732d910fc38de43ca8fd48804bb86c5e4\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { AddressUtils } from '../utils/AddressUtils.sol';\\nimport { IProxy } from './IProxy.sol';\\n\\n/**\\n * @title Base proxy contract\\n */\\nabstract contract Proxy is IProxy {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice delegate all calls to implementation contract\\n     * @dev reverts if implementation address contains no code, for compatibility with metamorphic contracts\\n     * @dev memory location in use by assembly may be unsafe in other contexts\\n     */\\n    fallback() external payable virtual {\\n        address implementation = _getImplementation();\\n\\n        if (!implementation.isContract())\\n            revert Proxy__ImplementationIsNotContract();\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(\\n                gas(),\\n                implementation,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice get logic implementation address\\n     * @return implementation address\\n     */\\n    function _getImplementation() internal virtual returns (address);\\n}\\n\",\"keccak256\":\"0x4d6ba63d71b8cddb57746d564cc904931d1ee479052a19f902787417ee5d97a8\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/ISolidStateDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ISafeOwnable } from '../../access/ownable/ISafeOwnable.sol';\\nimport { IERC165 } from '../../interfaces/IERC165.sol';\\nimport { IDiamondBase } from './base/IDiamondBase.sol';\\nimport { IDiamondFallback } from './fallback/IDiamondFallback.sol';\\nimport { IDiamondReadable } from './readable/IDiamondReadable.sol';\\nimport { IDiamondWritable } from './writable/IDiamondWritable.sol';\\n\\ninterface ISolidStateDiamond is\\n    IDiamondBase,\\n    IDiamondFallback,\\n    IDiamondReadable,\\n    IDiamondWritable,\\n    ISafeOwnable,\\n    IERC165\\n{\\n    receive() external payable;\\n}\\n\",\"keccak256\":\"0x541fe148acc6b9331149498d6f66308761a650da10c9bd8f9e933bdfec52f730\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/SolidStateDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IOwnable, Ownable, OwnableInternal } from '../../access/ownable/Ownable.sol';\\nimport { ISafeOwnable, SafeOwnable } from '../../access/ownable/SafeOwnable.sol';\\nimport { IERC165 } from '../../interfaces/IERC165.sol';\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { ERC165Base, ERC165BaseStorage } from '../../introspection/ERC165/base/ERC165Base.sol';\\nimport { DiamondBase } from './base/DiamondBase.sol';\\nimport { DiamondFallback, IDiamondFallback } from './fallback/DiamondFallback.sol';\\nimport { DiamondReadable, IDiamondReadable } from './readable/DiamondReadable.sol';\\nimport { DiamondWritable, IDiamondWritable } from './writable/DiamondWritable.sol';\\nimport { ISolidStateDiamond } from './ISolidStateDiamond.sol';\\n\\n/**\\n * @title SolidState \\\"Diamond\\\" proxy reference implementation\\n */\\nabstract contract SolidStateDiamond is\\n    ISolidStateDiamond,\\n    DiamondBase,\\n    DiamondFallback,\\n    DiamondReadable,\\n    DiamondWritable,\\n    SafeOwnable,\\n    ERC165Base\\n{\\n    constructor() {\\n        bytes4[] memory selectors = new bytes4[](12);\\n        uint256 selectorIndex;\\n\\n        // register DiamondFallback\\n\\n        selectors[selectorIndex++] = IDiamondFallback\\n            .getFallbackAddress\\n            .selector;\\n        selectors[selectorIndex++] = IDiamondFallback\\n            .setFallbackAddress\\n            .selector;\\n\\n        _setSupportsInterface(type(IDiamondFallback).interfaceId, true);\\n\\n        // register DiamondWritable\\n\\n        selectors[selectorIndex++] = IDiamondWritable.diamondCut.selector;\\n\\n        _setSupportsInterface(type(IDiamondWritable).interfaceId, true);\\n\\n        // register DiamondReadable\\n\\n        selectors[selectorIndex++] = IDiamondReadable.facets.selector;\\n        selectors[selectorIndex++] = IDiamondReadable\\n            .facetFunctionSelectors\\n            .selector;\\n        selectors[selectorIndex++] = IDiamondReadable.facetAddresses.selector;\\n        selectors[selectorIndex++] = IDiamondReadable.facetAddress.selector;\\n\\n        _setSupportsInterface(type(IDiamondReadable).interfaceId, true);\\n\\n        // register ERC165\\n\\n        selectors[selectorIndex++] = IERC165.supportsInterface.selector;\\n\\n        _setSupportsInterface(type(IERC165).interfaceId, true);\\n\\n        // register SafeOwnable\\n\\n        selectors[selectorIndex++] = Ownable.owner.selector;\\n        selectors[selectorIndex++] = SafeOwnable.nomineeOwner.selector;\\n        selectors[selectorIndex++] = Ownable.transferOwnership.selector;\\n        selectors[selectorIndex++] = SafeOwnable.acceptOwnership.selector;\\n\\n        _setSupportsInterface(type(IERC173).interfaceId, true);\\n\\n        // diamond cut\\n\\n        FacetCut[] memory facetCuts = new FacetCut[](1);\\n\\n        facetCuts[0] = FacetCut({\\n            target: address(this),\\n            action: FacetCutAction.ADD,\\n            selectors: selectors\\n        });\\n\\n        _diamondCut(facetCuts, address(0), '');\\n\\n        // set owner\\n\\n        _setOwner(msg.sender);\\n    }\\n\\n    receive() external payable {}\\n\\n    function _transferOwnership(\\n        address account\\n    ) internal virtual override(OwnableInternal, SafeOwnable) {\\n        super._transferOwnership(account);\\n    }\\n\\n    /**\\n     * @inheritdoc DiamondFallback\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        override(DiamondBase, DiamondFallback)\\n        returns (address implementation)\\n    {\\n        implementation = super._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xaa948c0ce846c4d4cec638b1b12580217b4782bbd1b25274d89bce5e2df14713\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/DiamondBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { Proxy } from '../../Proxy.sol';\\nimport { IDiamondBase } from './IDiamondBase.sol';\\nimport { DiamondBaseStorage } from './DiamondBaseStorage.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy base contract\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\nabstract contract DiamondBase is IDiamondBase, Proxy {\\n    /**\\n     * @inheritdoc Proxy\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address implementation)\\n    {\\n        // inline storage layout retrieval uses less gas\\n        DiamondBaseStorage.Layout storage l;\\n        bytes32 slot = DiamondBaseStorage.STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n\\n        implementation = address(bytes20(l.facets[msg.sig]));\\n    }\\n}\\n\",\"keccak256\":\"0x6712d6c7bee937ac07ee00eeaa30895634fbd3cda7f5b5c179a2331ad05623df\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/DiamondBaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nlibrary DiamondBaseStorage {\\n    struct Layout {\\n        // function selector => (facet address, selector slot position)\\n        mapping(bytes4 => bytes32) facets;\\n        // total number of selectors registered\\n        uint16 selectorCount;\\n        // array of selector slots with 8 selectors per slot\\n        mapping(uint256 => bytes32) selectorSlots;\\n        address fallbackAddress;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.DiamondBase');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x74365666c0e9917d742bbab21e174dea6bc6ccf6146153e43dd9d9fe8417a36a\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/IDiamondBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IProxy } from '../../IProxy.sol';\\n\\ninterface IDiamondBase is IProxy {}\\n\",\"keccak256\":\"0x3329852027ffb50519a245376a1dee8f828223c0fa439bbb16a80a1bc226c2fa\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/fallback/DiamondFallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { OwnableInternal } from '../../../access/ownable/OwnableInternal.sol';\\nimport { DiamondBase } from '../base/DiamondBase.sol';\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondFallback } from './IDiamondFallback.sol';\\n\\n// TODO: DiamondFallback interface\\n\\n/**\\n * @title Fallback feature for EIP-2535 \\\"Diamond\\\" proxy\\n */\\nabstract contract DiamondFallback is\\n    IDiamondFallback,\\n    OwnableInternal,\\n    DiamondBase\\n{\\n    /**\\n     * @inheritdoc IDiamondFallback\\n     */\\n    function getFallbackAddress()\\n        external\\n        view\\n        returns (address fallbackAddress)\\n    {\\n        fallbackAddress = _getFallbackAddress();\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondFallback\\n     */\\n    function setFallbackAddress(address fallbackAddress) external onlyOwner {\\n        _setFallbackAddress(fallbackAddress);\\n    }\\n\\n    /**\\n     * @inheritdoc DiamondBase\\n     * @notice query custom fallback address is no implementation is found\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address implementation)\\n    {\\n        implementation = super._getImplementation();\\n\\n        if (implementation == address(0)) {\\n            implementation = _getFallbackAddress();\\n        }\\n    }\\n\\n    /**\\n     * @notice query the address of the fallback implementation\\n     * @return fallbackAddress address of fallback implementation\\n     */\\n    function _getFallbackAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address fallbackAddress)\\n    {\\n        fallbackAddress = DiamondBaseStorage.layout().fallbackAddress;\\n    }\\n\\n    /**\\n     * @notice set the address of the fallback implementation\\n     * @param fallbackAddress address of fallback implementation\\n     */\\n    function _setFallbackAddress(address fallbackAddress) internal virtual {\\n        DiamondBaseStorage.layout().fallbackAddress = fallbackAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x22b541ba05979a4decc7c2f191aac3d873e44171fd1c3cbcca55e45651eaf024\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/fallback/IDiamondFallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IDiamondBase } from '../base/IDiamondBase.sol';\\n\\ninterface IDiamondFallback is IDiamondBase {\\n    /**\\n     * @notice query the address of the fallback implementation\\n     * @return fallbackAddress address of fallback implementation\\n     */\\n    function getFallbackAddress()\\n        external\\n        view\\n        returns (address fallbackAddress);\\n\\n    /**\\n     * @notice set the address of the fallback implementation\\n     * @param fallbackAddress address of fallback implementation\\n     */\\n    function setFallbackAddress(address fallbackAddress) external;\\n}\\n\",\"keccak256\":\"0x1b52280562511510101b03ea1c73d64645770582ba72aad8bb1633ccc8ae6d42\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/readable/DiamondReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondReadable } from './IDiamondReadable.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy introspection contract\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nabstract contract DiamondReadable is IDiamondReadable {\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets) {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        diamondFacets = new Facet[](l.selectorCount);\\n\\n        uint8[] memory numFacetSelectors = new uint8[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (diamondFacets[facetIndex].target == facet) {\\n                        diamondFacets[facetIndex].selectors[\\n                            numFacetSelectors[facetIndex]\\n                        ] = selector;\\n                        // probably will never have more than 256 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                diamondFacets[numFacets].target = facet;\\n                diamondFacets[numFacets].selectors = new bytes4[](\\n                    l.selectorCount\\n                );\\n                diamondFacets[numFacets].selectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes4[] memory selectors = diamondFacets[facetIndex].selectors;\\n\\n            // setting the number of selectors\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n\\n        // setting the number of facets\\n        assembly {\\n            mstore(diamondFacets, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetFunctionSelectors(\\n        address facet\\n    ) external view returns (bytes4[] memory selectors) {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        selectors = new bytes4[](l.selectorCount);\\n\\n        uint256 numSelectors;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n\\n                if (facet == address(bytes20(l.facets[selector]))) {\\n                    selectors[numSelectors] = selector;\\n                    numSelectors++;\\n                }\\n            }\\n        }\\n\\n        // set the number of selectors in the array\\n        assembly {\\n            mstore(selectors, numSelectors)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        addresses = new address[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facet == addresses[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                addresses[numFacets] = facet;\\n                numFacets++;\\n            }\\n        }\\n\\n        // set the number of facet addresses in the array\\n        assembly {\\n            mstore(addresses, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetAddress(\\n        bytes4 selector\\n    ) external view returns (address facet) {\\n        facet = address(bytes20(DiamondBaseStorage.layout().facets[selector]));\\n    }\\n}\\n\",\"keccak256\":\"0x03fd06c9bd8642a42ece1d9f75c9e99869a06f4310fa9fe80df924ff68984036\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/readable/IDiamondReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Diamond proxy introspection interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondReadable {\\n    struct Facet {\\n        address target;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice get all facets and their selectors\\n     * @return diamondFacets array of structured facet data\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets);\\n\\n    /**\\n     * @notice get all selectors for given facet address\\n     * @param facet address of facet to query\\n     * @return selectors array of function selectors\\n     */\\n    function facetFunctionSelectors(\\n        address facet\\n    ) external view returns (bytes4[] memory selectors);\\n\\n    /**\\n     * @notice get addresses of all facets used by diamond\\n     * @return addresses array of facet addresses\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses);\\n\\n    /**\\n     * @notice get the address of the facet associated with given selector\\n     * @param selector function selector to query\\n     * @return facet facet address (zero address if not found)\\n     */\\n    function facetAddress(\\n        bytes4 selector\\n    ) external view returns (address facet);\\n}\\n\",\"keccak256\":\"0xe3536079514a210e74f6e93b62525d451ed75c50c82773f9574c24e886ebe1ed\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/DiamondWritable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { OwnableInternal } from '../../../access/ownable/OwnableInternal.sol';\\nimport { IDiamondWritable } from './IDiamondWritable.sol';\\nimport { DiamondWritableInternal } from './DiamondWritableInternal.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy update contract\\n */\\nabstract contract DiamondWritable is\\n    IDiamondWritable,\\n    DiamondWritableInternal,\\n    OwnableInternal\\n{\\n    /**\\n     * @inheritdoc IDiamondWritable\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external onlyOwner {\\n        _diamondCut(facetCuts, target, data);\\n    }\\n}\\n\",\"keccak256\":\"0xf481debe21720da2aa6a26492a57469b3592da44867935bc432f9ac8ffcdddd2\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/DiamondWritableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondWritableInternal } from './IDiamondWritableInternal.sol';\\n\\nabstract contract DiamondWritableInternal is IDiamondWritableInternal {\\n    using AddressUtils for address;\\n\\n    bytes32 private constant CLEAR_ADDRESS_MASK =\\n        bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 private constant CLEAR_SELECTOR_MASK =\\n        bytes32(uint256(0xffffffff << 224));\\n\\n    /**\\n     * @notice update functions callable on Diamond proxy\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional recipient of initialization delegatecall\\n     * @param data optional initialization call data\\n     */\\n    function _diamondCut(\\n        FacetCut[] memory facetCuts,\\n        address target,\\n        bytes memory data\\n    ) internal {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        unchecked {\\n            uint256 originalSelectorCount = l.selectorCount;\\n            uint256 selectorCount = originalSelectorCount;\\n            bytes32 selectorSlot;\\n\\n            // Check if last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                // get last selectorSlot\\n                selectorSlot = l.selectorSlots[selectorCount >> 3];\\n            }\\n\\n            for (uint256 i; i < facetCuts.length; i++) {\\n                FacetCut memory facetCut = facetCuts[i];\\n                FacetCutAction action = facetCut.action;\\n\\n                if (facetCut.selectors.length == 0)\\n                    revert DiamondWritable__SelectorNotSpecified();\\n\\n                if (action == FacetCutAction.ADD) {\\n                    (selectorCount, selectorSlot) = _addFacetSelectors(\\n                        l,\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                } else if (action == FacetCutAction.REPLACE) {\\n                    _replaceFacetSelectors(l, facetCut);\\n                } else if (action == FacetCutAction.REMOVE) {\\n                    (selectorCount, selectorSlot) = _removeFacetSelectors(\\n                        l,\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                }\\n            }\\n\\n            if (selectorCount != originalSelectorCount) {\\n                l.selectorCount = uint16(selectorCount);\\n            }\\n\\n            // If last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n            }\\n\\n            emit DiamondCut(facetCuts, target, data);\\n            _initialize(target, data);\\n        }\\n    }\\n\\n    function _addFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            if (\\n                facetCut.target != address(this) &&\\n                !facetCut.target.isContract()\\n            ) revert DiamondWritable__TargetHasNoCode();\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                if (address(bytes20(oldFacet)) != address(0))\\n                    revert DiamondWritable__SelectorAlreadyAdded();\\n\\n                // add facet for selector\\n                l.facets[selector] =\\n                    bytes20(facetCut.target) |\\n                    bytes32(selectorCount);\\n                uint256 selectorInSlotPosition = (selectorCount & 7) << 5;\\n\\n                // clear selector position in slot and add selector\\n                selectorSlot =\\n                    (selectorSlot &\\n                        ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n                    selectorSlot = 0;\\n                }\\n\\n                selectorCount++;\\n            }\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function _removeFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            if (facetCut.target != address(0))\\n                revert DiamondWritable__RemoveTargetNotZeroAddress();\\n\\n            uint256 selectorSlotCount = selectorCount >> 3;\\n            uint256 selectorInSlotIndex = selectorCount & 7;\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                if (address(bytes20(oldFacet)) == address(0))\\n                    revert DiamondWritable__SelectorNotFound();\\n\\n                if (address(bytes20(oldFacet)) == address(this))\\n                    revert DiamondWritable__SelectorIsImmutable();\\n\\n                if (selectorSlot == 0) {\\n                    selectorSlotCount--;\\n                    selectorSlot = l.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n\\n                // adding a block here prevents stack too deep error\\n                {\\n                    // replace selector with last selector in l.facets\\n                    lastSelector = bytes4(\\n                        selectorSlot << (selectorInSlotIndex << 5)\\n                    );\\n\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        l.facets[lastSelector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            bytes20(l.facets[lastSelector]);\\n                    }\\n\\n                    delete l.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = l.selectorSlots[\\n                        oldSelectorsSlotCount\\n                    ];\\n\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\n                    // update storage with the modified slot\\n                    l.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    selectorSlot =\\n                        (selectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n\\n                if (selectorInSlotIndex == 0) {\\n                    delete l.selectorSlots[selectorSlotCount];\\n                    selectorSlot = 0;\\n                }\\n            }\\n\\n            selectorCount = (selectorSlotCount << 3) | selectorInSlotIndex;\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function _replaceFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        FacetCut memory facetCut\\n    ) internal {\\n        unchecked {\\n            if (!facetCut.target.isContract())\\n                revert DiamondWritable__TargetHasNoCode();\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n\\n                if (oldFacetAddress == address(0))\\n                    revert DiamondWritable__SelectorNotFound();\\n                if (oldFacetAddress == address(this))\\n                    revert DiamondWritable__SelectorIsImmutable();\\n                if (oldFacetAddress == facetCut.target)\\n                    revert DiamondWritable__ReplaceTargetIsIdentical();\\n\\n                // replace old facet address\\n                l.facets[selector] =\\n                    (oldFacet & CLEAR_ADDRESS_MASK) |\\n                    bytes20(facetCut.target);\\n            }\\n        }\\n    }\\n\\n    function _initialize(address target, bytes memory data) private {\\n        if ((target == address(0)) != (data.length == 0))\\n            revert DiamondWritable__InvalidInitializationParameters();\\n\\n        if (target != address(0)) {\\n            if (target != address(this)) {\\n                if (!target.isContract())\\n                    revert DiamondWritable__TargetHasNoCode();\\n            }\\n\\n            (bool success, ) = target.delegatecall(data);\\n\\n            if (!success) {\\n                assembly {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9bc52044616cc2058d15aa07455f9ab4a2d6b0cb4bd542d6b5b8df092b501387\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/IDiamondWritable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IDiamondWritableInternal } from './IDiamondWritableInternal.sol';\\n\\n/**\\n * @title Diamond proxy upgrade interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondWritable is IDiamondWritableInternal {\\n    /**\\n     * @notice update diamond facets and optionally execute arbitrary initialization function\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional target of initialization delegatecall\\n     * @param data optional initialization function call data\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3d7dd0fa5d4cef8889d507880fe68d0b1558f6c21c5855170c44ef7e2b05bcef\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/IDiamondWritableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IDiamondWritableInternal {\\n    enum FacetCutAction {\\n        ADD,\\n        REPLACE,\\n        REMOVE\\n    }\\n\\n    event DiamondCut(FacetCut[] facetCuts, address target, bytes data);\\n\\n    error DiamondWritable__InvalidInitializationParameters();\\n    error DiamondWritable__RemoveTargetNotZeroAddress();\\n    error DiamondWritable__ReplaceTargetIsIdentical();\\n    error DiamondWritable__SelectorAlreadyAdded();\\n    error DiamondWritable__SelectorIsImmutable();\\n    error DiamondWritable__SelectorNotFound();\\n    error DiamondWritable__SelectorNotSpecified();\\n    error DiamondWritable__TargetHasNoCode();\\n\\n    struct FacetCut {\\n        address target;\\n        FacetCutAction action;\\n        bytes4[] selectors;\\n    }\\n}\\n\",\"keccak256\":\"0x82e0eeb28c8b8bd1ee9c5dd3247fa3d4062d5c6d43061833714c88741ecb5605\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC721MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Metadata');\\n\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe220a86657018b0d498708b7d8c728042d9a41e8ac230e22d1a09b6bf866332e\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/management/ManagementStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ManagementStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"untrading.unDiamond.NFT.facet.management.storage\\\");\\n\\n    struct Layout {\\n        address untradingManager;\\n        uint256 managerCut; // This is the cut of the oTokens that the untradingManager gets\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x067116ca0516245a2209e7cbc592d247400f5cd1827d4e5698e51f8cb3cab8b9\",\"license\":\"MIT\"},\"contracts/unDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@solidstate/contracts/proxy/diamond/SolidStateDiamond.sol\\\";\\nimport {IERC165} from \\\"@solidstate/contracts/interfaces/IERC165.sol\\\";\\nimport {ERC165BaseStorage} from \\\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\\\";\\nimport {ERC721MetadataStorage} from \\\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\\\";\\nimport {IERC721} from \\\"@solidstate/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@drad/eip-5173-diamond/contracts/nFR/InFR.sol\\\";\\n\\nimport \\\"./management/ManagementStorage.sol\\\";\\n\\ncontract unDiamond is SolidStateDiamond {\\n    using ERC165BaseStorage for ERC165BaseStorage.Layout;\\n\\n    constructor(\\n        address untradingManager,\\n        uint256 managerCut,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI\\n    ) {\\n        require(managerCut <= 1e18, \\\"managerCut exceeds 100%\\\");\\n        // Init the ERC721 Metadata for the unNFT Shared Contract\\n        ERC721MetadataStorage.Layout storage l = ERC721MetadataStorage.layout();\\n        l.name = name;\\n        l.symbol = symbol;\\n        l.baseURI = baseURI;\\n\\n        // Declare all interfaces supported by the Diamond\\n        ERC165BaseStorage.layout().supportedInterfaces[type(IERC165).interfaceId] = true;\\n        ERC165BaseStorage.layout().supportedInterfaces[type(IERC721).interfaceId] = true;\\n        ERC165BaseStorage.layout().supportedInterfaces[type(InFR).interfaceId] = true;\\n\\n        // Init the manager and managerCut used by oTokens\\n        ManagementStorage.Layout storage m = ManagementStorage.layout();\\n        m.untradingManager = untradingManager;\\n        m.managerCut = managerCut;\\n    }\\n}\\n\",\"keccak256\":\"0x810ebc645eb5f68119df93353db118169c2a7ce32fd6b50bff414a8a4efd918e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200320c3803806200320c833981016040819052620000349162001137565b60408051600c8082526101a0820190925260009160208201610180803683370190505090506000632c40805960e01b82826200007081620011f3565b9350815181106200008557620000856200121d565b6001600160e01b031990921660209283029190910190910152639142376560e01b8282620000b381620011f3565b935081518110620000c857620000c86200121d565b6001600160e01b031990921660209283029190910190910152620000f5632f40adcf60e21b600162000652565b6307e4c70760e21b82826200010a81620011f3565b9350815181106200011f576200011f6200121d565b6001600160e01b0319909216602092830291909101909101526200014c6307e4c70760e21b600162000652565b637a0ed62760e01b82826200016181620011f3565b9350815181106200017657620001766200121d565b6001600160e01b0319909216602092830291909101909101526356fe50af60e11b8282620001a481620011f3565b935081518110620001b957620001b96200121d565b6001600160e01b0319909216602092830291909101909101526314bbdacb60e21b8282620001e781620011f3565b935081518110620001fc57620001fc6200121d565b6001600160e01b0319909216602092830291909101909101526366ffd66360e11b82826200022a81620011f3565b9350815181106200023f576200023f6200121d565b6001600160e01b0319909216602092830291909101909101526200026c6348e2b09360e01b600162000652565b6301ffc9a760e01b82826200028181620011f3565b9350815181106200029657620002966200121d565b6001600160e01b031990921660209283029190910190910152620002c36301ffc9a760e01b600162000652565b638da5cb5b60e01b8282620002d881620011f3565b935081518110620002ed57620002ed6200121d565b6001600160e01b03199092166020928302919091019091015263455a8a8560e11b82826200031b81620011f3565b9350815181106200033057620003306200121d565b6001600160e01b03199092166020928302919091019091015263f2fde38b60e01b82826200035e81620011f3565b9350815181106200037357620003736200121d565b6001600160e01b0319909216602092830291909101909101526379ba509760e01b8282620003a181620011f3565b935081518110620003b657620003b66200121d565b6001600160e01b031990921660209283029190910190910152620003e36307f5828d60e41b600162000652565b604080516001808252818301909252600091816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081620003fa579050506040805160608101909152308152909150602081016000815260200184815250816000815181106200046057620004606200121d565b60200260200101819052506200048e81600060405180602001604052806000815250620006c460201b60201c565b6200049933620008a4565b505050670de0b6b3a7640000841115620004f95760405162461bcd60e51b815260206004820152601760248201527f6d616e6167657243757420657863656564732031303025000000000000000000604482015260640160405180910390fd5b6000620005106200091860201b62000d181760201c565b845190915062000527908290602087019062000fb7565b5082516200053f906001830190602086019062000fb7565b50815162000557906002830190602085019062000fb7565b5060016200056f6200093c60201b62000d3c1760201c565b6301ffc9a760e01b6000908152602091825260409020805460ff191692151592909217909155600190620005ac906200093c811b62000d3c17901c565b6380ac58cd60e01b6000908152602091825260409020805460ff191692151592909217909155600190620005e9906200093c811b62000d3c17901c565b63ba64365760e01b6000908152602091825260408120805460ff191693151593909317909255620006239062000960811b62000d6017901c565b80546001600160a01b0319166001600160a01b03989098169790971787555050505060019092015550620013d9565b6001600160e01b031980831614156200067e5760405163b0a19dd560e01b815260040160405180910390fd5b80620006946200093c60201b62000d3c1760201c565b6001600160e01b03199390931660009081526020939093526040909220805460ff19169215159290921790915550565b6000620006db6200098460201b62000d841760201c565b600181015490915061ffff8116908190600090600716156200070f5750600381901c60009081526002840160205260409020545b60005b8751811015620008125760008882815181106200073357620007336200121d565b60200260200101519050600081602001519050816040015151600014156200076e5760405163eb6c3aeb60e01b815260040160405180910390fd5b600081600281111562000785576200078562001233565b1415620007a5576200079a87868685620009a8565b909550935062000807565b6001816002811115620007bc57620007bc62001233565b1415620007d557620007cf878362000b07565b62000807565b6002816002811115620007ec57620007ec62001233565b14156200080757620008018786868562000c66565b90955093505b505060010162000712565b508282146200082f5760018401805461ffff191661ffff84161790555b60078216156200085257600382901c600090815260028501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673878787604051620008879392919062001277565b60405180910390a16200089b868662000e8c565b50505050505050565b6000620008bb62000f8d60201b62000da81760201c565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b7f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b190565b7ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d890565b7f1c5e8fa68a2e18767b1f14b74959cf2ccd4e7455f76450fee582330c15ede59d90565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b805160009081906001600160a01b03163014801590620009e85750620009e683600001516001600160a01b031662000fb160201b620003581760201c565b155b1562000a0757604051633ddc5cab60e21b815260040160405180910390fd5b60005b83604001515181101562000afa5760008460400151828151811062000a335762000a336200121d565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c1562000a8057604051634923a77160e11b815260040160405180910390fd5b85516001600160e01b0319838116600081815260208d90526040902060609390931b6001600160601b0319168b1790925560058a901b60e090811692831c91831c1999909916179781141562000aea57600389901c600090815260028b0160205260408120989098555b5050506001958601950162000a0a565b5093959294509192505050565b62000b2a81600001516001600160a01b031662000fb160201b620003581760201c565b62000b4857604051633ddc5cab60e21b815260040160405180910390fd5b60005b81604001515181101562000c615760008260400151828151811062000b745762000b746200121d565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c8062000bc1576040516337e25a9760e11b815260040160405180910390fd5b6001600160a01b03811630141562000bec5760405163e983573160e01b815260040160405180910390fd5b84516001600160a01b038281169116141562000c1b576040516330baabf360e11b815260040160405180910390fd5b5083516001600160e01b031992909216600090815260208690526040902060609290921b6001600160601b0319166001600160601b039190911617905560010162000b4b565b505050565b805160009081906001600160a01b03161562000c9557604051633ab3490960e21b815260040160405180910390fd5b600385901c6007861660005b85604001515181101562000e785760008660400151828151811062000cca5762000cca6200121d565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c62000d16576040516337e25a9760e11b815260040160405180910390fd5b606081901c30141562000d3c5760405163e983573160e01b815260040160405180910390fd5b8862000d6657600019909401600081815260028c0160205260409020549850936007935062000d6e565b600019909301925b600584901b89901b6000806001600160e01b03198084169086161462000dc1576001600160e01b03198316600090815260208f90526040902080546001600160601b0319166001600160601b0386161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b1687821462000e2657600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c17905562000e4a565b80836001600160e01b031916901c816001600160e01b031960001b901c198d16179b505b8662000e6657600088815260028f01602052604081208190559b505b50506001909301925062000ca1915050565b5060039190911b1796939550929350505050565b8051156001600160a01b038316151462000eb9576040516326df4ccd60e01b815260040160405180910390fd5b6001600160a01b0382161562000f89576001600160a01b038216301462000f175762000ef9826001600160a01b031662000fb160201b620003581760201c565b62000f1757604051633ddc5cab60e21b815260040160405180910390fd5b6000826001600160a01b03168260405162000f3391906200137e565b600060405180830381855af49150503d806000811462000f70576040519150601f19603f3d011682016040523d82523d6000602084013e62000f75565b606091505b505090508062000c61573d6000803e3d6000fd5b5050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b3b151590565b82805462000fc5906200139c565b90600052602060002090601f01602090048101928262000fe9576000855562001034565b82601f106200100457805160ff191683800117855562001034565b8280016001018555821562001034579182015b828111156200103457825182559160200191906001019062001017565b506200104292915062001046565b5090565b5b8082111562001042576000815560010162001047565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200109057818101518382015260200162001076565b83811115620010a0576000848401525b50505050565b600082601f830112620010b857600080fd5b81516001600160401b0380821115620010d557620010d56200105d565b604051601f8301601f19908116603f011681019082821181831017156200110057620011006200105d565b816040528381528660208588010111156200111a57600080fd5b6200112d84602083016020890162001073565b9695505050505050565b600080600080600060a086880312156200115057600080fd5b85516001600160a01b03811681146200116857600080fd5b6020870151604088015191965094506001600160401b03808211156200118d57600080fd5b6200119b89838a01620010a6565b94506060880151915080821115620011b257600080fd5b620011c089838a01620010a6565b93506080880151915080821115620011d757600080fd5b50620011e688828901620010a6565b9150509295509295909350565b60006000198214156200121657634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b600081518084526200126381602086016020860162001073565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b848110156200134c57898403607f19018652815180516001600160a01b03168552838101518986019060038110620012e857634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b80831015620013365783516001600160e01b03191682529286019260019290920191908601906200130a565b50978501979550505090820190600101620012a0565b50506001600160a01b038a1690880152868103604088015262001370818962001249565b9a9950505050505050505050565b600082516200139281846020870162001073565b9190910192915050565b600181811c90821680620013b157607f821691505b60208210811415620013d357634e487b7160e01b600052602260045260246000fd5b50919050565b611e2380620013e96000396000f3fe6080604052600436106100cb5760003560e01c80638ab5150a11610074578063adfca15e1161004e578063adfca15e146102a3578063cdffacc6146102d0578063f2fde38b14610329576100d2565b80638ab5150a146102595780638da5cb5b1461026e5780639142376514610283576100d2565b806352ef6b2c116100a557806352ef6b2c1461020057806379ba5097146102225780637a0ed62714610237576100d2565b806301ffc9a7146101435780631f931c1c146101b15780632c408059146101d3576100d2565b366100d257005b60006100dc610349565b90506001600160a01b0381163b61011f576040517f87c9fc3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3660008037600080366000845af43d6000803e80801561013e573d6000f35b3d6000fd5b34801561014f57600080fd5b5061019c61015e3660046117c7565b6001600160e01b03191660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604090205460ff1690565b60405190151581526020015b60405180910390f35b3480156101bd57600080fd5b506101d16101cc366004611849565b61035e565b005b3480156101df57600080fd5b506101e86103e8565b6040516001600160a01b0390911681526020016101a8565b34801561020c57600080fd5b5061021561041b565b6040516101a891906118fb565b34801561022e57600080fd5b506101d16105f8565b34801561024357600080fd5b5061024c610654565b6040516101a8919061198d565b34801561026557600080fd5b506101e8610ab6565b34801561027a57600080fd5b506101e8610ac0565b34801561028f57600080fd5b506101d161029e366004611a0a565b610aca565b3480156102af57600080fd5b506102c36102be366004611a0a565b610b50565b6040516101a89190611a25565b3480156102dc57600080fd5b506101e86102eb3660046117c7565b6001600160e01b03191660009081527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93602052604090205460601c90565b34801561033557600080fd5b506101d1610344366004611a0a565b610cd6565b6000610353610dcc565b905090565b3b151590565b610366610e3f565b6001600160a01b0316336001600160a01b03161461039757604051632f7a8ee160e01b815260040160405180910390fd5b6103e16103a48587611afb565b8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e7292505050565b5050505050565b60006103537f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96546001600160a01b031690565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff81111561047e5761047e611a67565b6040519080825280602002602001820160405280156104a7578160200160208202803683370190505b50915060008060005b600184015461ffff168210156105f0576000818152600285016020526040812054905b60088110156105db57836104e681611c45565b600188015490955061ffff168511159050610500576105db565b600581901b82901b6001600160e01b0319811660009081526020889052604081205460601c90805b8881101561057e578a818151811061054257610542611c60565b60200260200101516001600160a01b0316836001600160a01b0316141561056c576001915061057e565b8061057681611c45565b915050610528565b50801561058d575050506105c9565b818a89815181106105a0576105a0611c60565b6001600160a01b0390921660209283029190910190910152876105c281611c45565b9850505050505b806105d381611c45565b9150506104d3565b505080806105e890611c45565b9150506104b0565b505082525090565b61060061106f565b6001600160a01b0316336001600160a01b03161461064a576040517fefd1052d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610652611097565b565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff8111156106b7576106b7611a67565b6040519080825280602002602001820160405280156106fd57816020015b6040805180820190915260008152606060208201528152602001906001900390816106d55790505b50600182015490925060009061ffff1667ffffffffffffffff81111561072557610725611a67565b60405190808252806020026020018201604052801561074e578160200160208202803683370190505b50905060008060005b600185015461ffff16821015610a44576000818152600286016020526040812054905b6008811015610a2f578361078d81611c45565b600189015490955061ffff1685111590506107a757610a2f565b600581901b82901b6001600160e01b0319811660009081526020899052604081205460601c90805b888110156108ed57826001600160a01b03168c82815181106107f3576107f3611c60565b6020026020010151600001516001600160a01b031614156108db57838c828151811061082157610821611c60565b6020026020010151602001518b838151811061083f5761083f611c60565b602002602001015160ff168151811061085a5761085a611c60565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8a828151811061089057610890611c60565b602002602001015160ff16106108a557600080fd5b8981815181106108b7576108b7611c60565b6020026020010180518091906108cc90611c76565b60ff16905250600191506108ed565b806108e581611c45565b9150506107cf565b5080156108fc57505050610a1d565b818b898151811061090f5761090f611c60565b60209081029190910101516001600160a01b03909116905260018a015461ffff1667ffffffffffffffff81111561094857610948611a67565b604051908082528060200260200182016040528015610971578160200160208202803683370190505b508b898151811061098457610984611c60565b602002602001015160200181905250828b89815181106109a6576109a6611c60565b6020026020010151602001516000815181106109c4576109c4611c60565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060018989815181106109fa576109fa611c60565b60ff9092166020928302919091019091015287610a1681611c45565b9850505050505b80610a2781611c45565b91505061077a565b50508080610a3c90611c45565b915050610757565b5060005b82811015610aab576000848281518110610a6457610a64611c60565b602002602001015160ff1690506000878381518110610a8557610a85611c60565b602002602001015160200151905081815250508080610aa390611c45565b915050610a48565b508185525050505090565b600061035361106f565b6000610353610e3f565b610ad2610e3f565b6001600160a01b0316336001600160a01b031614610b0357604051632f7a8ee160e01b815260040160405180910390fd5b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b50565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff811115610bb357610bb3611a67565b604051908082528060200260200182016040528015610bdc578160200160208202803683370190505b50915060008060005b600184015461ffff16821015610ccc576000818152600285016020526040812054905b6008811015610cb75783610c1b81611c45565b600188015490955061ffff168511159050610c3557610cb7565b600581901b82901b6001600160e01b0319811660009081526020889052604090205460601c6001600160a01b038a161415610ca45780888781518110610c7d57610c7d611c60565b6001600160e01b03199092166020928302919091019091015285610ca081611c45565b9650505b5080610caf81611c45565b915050610c08565b50508080610cc490611c45565b915050610be5565b5050825250919050565b610cde610e3f565b6001600160a01b0316336001600160a01b031614610d0f57604051632f7a8ee160e01b815260040160405180910390fd5b610b4d816110de565b7f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b190565b7ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d890565b7f1c5e8fa68a2e18767b1f14b74959cf2ccd4e7455f76450fee582330c15ede59d90565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b600080356001600160e01b03191681527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93602052604090205460601c80610e3c57507f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96546001600160a01b031690565b90565b60007f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605b546001600160a01b0316919050565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94547f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff811690819060009060071615610ee15750600381901c60009081526002840160205260409020545b60005b8751811015610fe3576000888281518110610f0157610f01611c60565b6020026020010151905060008160200151905081604001515160001415610f54576040517feb6c3aeb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000816002811115610f6857610f68611c96565b1415610f8457610f7a8786868561112c565b9095509350610fd9565b6001816002811115610f9857610f98611c96565b1415610fad57610fa88783611289565b610fd9565b6002816002811115610fc157610fc1611c96565b1415610fd957610fd3878686856113eb565b90955093505b5050600101610ee4565b50828214610fff5760018401805461ffff191661ffff84161790555b600782161561102157600382901c600090815260028501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67387878760405161105493929190611d08565b60405180910390a16110668686611626565b50505050505050565b60007f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890610e63565b6110a033611723565b7f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890805473ffffffffffffffffffffffffffffffffffffffff19169055565b7f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038316179055610b4d8181565b805160009081906001600160a01b03163014801590611154575082516001600160a01b03163b155b1561117257604051633ddc5cab60e21b815260040160405180910390fd5b60005b83604001515181101561127c5760008460400151828151811061119a5761119a611c60565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c156111ff576040517f92474ee200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85516001600160e01b0319838116600081815260208d90526040902060609390931b6bffffffffffffffffffffffff19168b1790925560058a901b60e090811692831c91831c1999909916179781141561126d57600389901c600090815260028b0160205260408120989098555b50505060019586019501611175565b5093959294509192505050565b80516001600160a01b03163b6112b257604051633ddc5cab60e21b815260040160405180910390fd5b60005b8160400151518110156113e6576000826040015182815181106112da576112da611c60565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c80611326576040516337e25a9760e11b815260040160405180910390fd5b6001600160a01b0381163014156113505760405163e983573160e01b815260040160405180910390fd5b84516001600160a01b0382811691161415611397576040517f617557e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5083516001600160e01b031992909216600090815260208690526040902060609290921b6bffffffffffffffffffffffff19166bffffffffffffffffffffffff919091161790556001016112b5565b505050565b805160009081906001600160a01b031615611432576040517feacd242400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600385901c6007861660005b8560400151518110156116125760008660400151828151811061146357611463611c60565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c6114ae576040516337e25a9760e11b815260040160405180910390fd5b606081901c3014156114d35760405163e983573160e01b815260040160405180910390fd5b886114fb57600019909401600081815260028c01602052604090205498509360079350611503565b600019909301925b600584901b89901b6000806001600160e01b03198084169086161461155f576001600160e01b03198316600090815260208f90526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff86161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b168782146115c257600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c1790556115e6565b80836001600160e01b031916901c816001600160e01b031960001b901c198d16179b505b8661160157600088815260028f01602052604081208190559b505b50506001909301925061143e915050565b5060039190911b1796939550929350505050565b8051156001600160a01b038316151461166b576040517f26df4ccd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0382161561171f576001600160a01b03821630146116b2576001600160a01b0382163b6116b257604051633ddc5cab60e21b815260040160405180910390fd5b6000826001600160a01b0316826040516116cc9190611dd1565b600060405180830381855af49150503d8060008114611707576040519150601f19603f3d011682016040523d82523d6000602084013e61170c565b606091505b50509050806113e6573d6000803e3d6000fd5b5050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046080546040516001600160a01b038481169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b80356001600160e01b0319811681146117c257600080fd5b919050565b6000602082840312156117d957600080fd5b6117e2826117aa565b9392505050565b80356001600160a01b03811681146117c257600080fd5b60008083601f84011261181257600080fd5b50813567ffffffffffffffff81111561182a57600080fd5b60208301915083602082850101111561184257600080fd5b9250929050565b60008060008060006060868803121561186157600080fd5b853567ffffffffffffffff8082111561187957600080fd5b818801915088601f83011261188d57600080fd5b81358181111561189c57600080fd5b8960208260051b85010111156118b157600080fd5b602083019750809650506118c7602089016117e9565b945060408801359150808211156118dd57600080fd5b506118ea88828901611800565b969995985093965092949392505050565b6020808252825182820181905260009190848201906040850190845b8181101561193c5783516001600160a01b031683529284019291840191600101611917565b50909695505050505050565b600081518084526020808501945080840160005b838110156119825781516001600160e01b0319168752958201959082019060010161195c565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156119fc57888303603f19018552815180516001600160a01b031684528701518784018790526119e987850182611948565b95880195935050908601906001016119b4565b509098975050505050505050565b600060208284031215611a1c57600080fd5b6117e2826117e9565b6020808252825182820181905260009190848201906040850190845b8181101561193c5783516001600160e01b03191683529284019291840191600101611a41565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611aa057611aa0611a67565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611acf57611acf611a67565b604052919050565b600067ffffffffffffffff821115611af157611af1611a67565b5060051b60200190565b6000611b0e611b0984611ad7565b611aa6565b83815260208082019190600586811b860136811115611b2c57600080fd5b865b81811015611c2257803567ffffffffffffffff80821115611b4f5760008081fd5b818a01915060608236031215611b655760008081fd5b611b6d611a7d565b611b76836117e9565b81528683013560038110611b8a5760008081fd5b8188015260408381013583811115611ba25760008081fd5b939093019236601f850112611bb957600092508283fd5b83359250611bc9611b0984611ad7565b83815292871b84018801928881019036851115611be65760008081fd5b948901945b84861015611c0b57611bfc866117aa565b82529489019490890190611beb565b918301919091525088525050948301948301611b2e565b5092979650505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611c5957611c59611c2f565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff811415611c8d57611c8d611c2f565b60010192915050565b634e487b7160e01b600052602160045260246000fd5b60005b83811015611cc7578181015183820152602001611caf565b83811115611cd6576000848401525b50505050565b60008151808452611cf4816020860160208601611cac565b601f01601f19169290920160200192915050565b6000606080830181845280875180835260808601915060808160051b87010192506020808a016000805b84811015611da157898703607f19018652825180516001600160a01b031688528481015160038110611d7257634e487b7160e01b84526021600452602484fd5b88860152604090810151908801899052611d8e89890182611948565b9750509483019491830191600101611d32565b5050506001600160a01b0389169087015250508381036040850152611dc68186611cdc565b979650505050505050565b60008251611de3818460208701611cac565b919091019291505056fea26469706673582212202496459a32e0e8bb499a0dd9e2e867b95134f84bd4a0e8c4a110fe7ae663623164736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100cb5760003560e01c80638ab5150a11610074578063adfca15e1161004e578063adfca15e146102a3578063cdffacc6146102d0578063f2fde38b14610329576100d2565b80638ab5150a146102595780638da5cb5b1461026e5780639142376514610283576100d2565b806352ef6b2c116100a557806352ef6b2c1461020057806379ba5097146102225780637a0ed62714610237576100d2565b806301ffc9a7146101435780631f931c1c146101b15780632c408059146101d3576100d2565b366100d257005b60006100dc610349565b90506001600160a01b0381163b61011f576040517f87c9fc3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3660008037600080366000845af43d6000803e80801561013e573d6000f35b3d6000fd5b34801561014f57600080fd5b5061019c61015e3660046117c7565b6001600160e01b03191660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604090205460ff1690565b60405190151581526020015b60405180910390f35b3480156101bd57600080fd5b506101d16101cc366004611849565b61035e565b005b3480156101df57600080fd5b506101e86103e8565b6040516001600160a01b0390911681526020016101a8565b34801561020c57600080fd5b5061021561041b565b6040516101a891906118fb565b34801561022e57600080fd5b506101d16105f8565b34801561024357600080fd5b5061024c610654565b6040516101a8919061198d565b34801561026557600080fd5b506101e8610ab6565b34801561027a57600080fd5b506101e8610ac0565b34801561028f57600080fd5b506101d161029e366004611a0a565b610aca565b3480156102af57600080fd5b506102c36102be366004611a0a565b610b50565b6040516101a89190611a25565b3480156102dc57600080fd5b506101e86102eb3660046117c7565b6001600160e01b03191660009081527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93602052604090205460601c90565b34801561033557600080fd5b506101d1610344366004611a0a565b610cd6565b6000610353610dcc565b905090565b3b151590565b610366610e3f565b6001600160a01b0316336001600160a01b03161461039757604051632f7a8ee160e01b815260040160405180910390fd5b6103e16103a48587611afb565b8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e7292505050565b5050505050565b60006103537f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96546001600160a01b031690565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff81111561047e5761047e611a67565b6040519080825280602002602001820160405280156104a7578160200160208202803683370190505b50915060008060005b600184015461ffff168210156105f0576000818152600285016020526040812054905b60088110156105db57836104e681611c45565b600188015490955061ffff168511159050610500576105db565b600581901b82901b6001600160e01b0319811660009081526020889052604081205460601c90805b8881101561057e578a818151811061054257610542611c60565b60200260200101516001600160a01b0316836001600160a01b0316141561056c576001915061057e565b8061057681611c45565b915050610528565b50801561058d575050506105c9565b818a89815181106105a0576105a0611c60565b6001600160a01b0390921660209283029190910190910152876105c281611c45565b9850505050505b806105d381611c45565b9150506104d3565b505080806105e890611c45565b9150506104b0565b505082525090565b61060061106f565b6001600160a01b0316336001600160a01b03161461064a576040517fefd1052d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610652611097565b565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff8111156106b7576106b7611a67565b6040519080825280602002602001820160405280156106fd57816020015b6040805180820190915260008152606060208201528152602001906001900390816106d55790505b50600182015490925060009061ffff1667ffffffffffffffff81111561072557610725611a67565b60405190808252806020026020018201604052801561074e578160200160208202803683370190505b50905060008060005b600185015461ffff16821015610a44576000818152600286016020526040812054905b6008811015610a2f578361078d81611c45565b600189015490955061ffff1685111590506107a757610a2f565b600581901b82901b6001600160e01b0319811660009081526020899052604081205460601c90805b888110156108ed57826001600160a01b03168c82815181106107f3576107f3611c60565b6020026020010151600001516001600160a01b031614156108db57838c828151811061082157610821611c60565b6020026020010151602001518b838151811061083f5761083f611c60565b602002602001015160ff168151811061085a5761085a611c60565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8a828151811061089057610890611c60565b602002602001015160ff16106108a557600080fd5b8981815181106108b7576108b7611c60565b6020026020010180518091906108cc90611c76565b60ff16905250600191506108ed565b806108e581611c45565b9150506107cf565b5080156108fc57505050610a1d565b818b898151811061090f5761090f611c60565b60209081029190910101516001600160a01b03909116905260018a015461ffff1667ffffffffffffffff81111561094857610948611a67565b604051908082528060200260200182016040528015610971578160200160208202803683370190505b508b898151811061098457610984611c60565b602002602001015160200181905250828b89815181106109a6576109a6611c60565b6020026020010151602001516000815181106109c4576109c4611c60565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060018989815181106109fa576109fa611c60565b60ff9092166020928302919091019091015287610a1681611c45565b9850505050505b80610a2781611c45565b91505061077a565b50508080610a3c90611c45565b915050610757565b5060005b82811015610aab576000848281518110610a6457610a64611c60565b602002602001015160ff1690506000878381518110610a8557610a85611c60565b602002602001015160200151905081815250508080610aa390611c45565b915050610a48565b508185525050505090565b600061035361106f565b6000610353610e3f565b610ad2610e3f565b6001600160a01b0316336001600160a01b031614610b0357604051632f7a8ee160e01b815260040160405180910390fd5b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b50565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff811115610bb357610bb3611a67565b604051908082528060200260200182016040528015610bdc578160200160208202803683370190505b50915060008060005b600184015461ffff16821015610ccc576000818152600285016020526040812054905b6008811015610cb75783610c1b81611c45565b600188015490955061ffff168511159050610c3557610cb7565b600581901b82901b6001600160e01b0319811660009081526020889052604090205460601c6001600160a01b038a161415610ca45780888781518110610c7d57610c7d611c60565b6001600160e01b03199092166020928302919091019091015285610ca081611c45565b9650505b5080610caf81611c45565b915050610c08565b50508080610cc490611c45565b915050610be5565b5050825250919050565b610cde610e3f565b6001600160a01b0316336001600160a01b031614610d0f57604051632f7a8ee160e01b815260040160405180910390fd5b610b4d816110de565b7f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b190565b7ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d890565b7f1c5e8fa68a2e18767b1f14b74959cf2ccd4e7455f76450fee582330c15ede59d90565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b600080356001600160e01b03191681527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93602052604090205460601c80610e3c57507f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96546001600160a01b031690565b90565b60007f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605b546001600160a01b0316919050565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94547f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff811690819060009060071615610ee15750600381901c60009081526002840160205260409020545b60005b8751811015610fe3576000888281518110610f0157610f01611c60565b6020026020010151905060008160200151905081604001515160001415610f54576040517feb6c3aeb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000816002811115610f6857610f68611c96565b1415610f8457610f7a8786868561112c565b9095509350610fd9565b6001816002811115610f9857610f98611c96565b1415610fad57610fa88783611289565b610fd9565b6002816002811115610fc157610fc1611c96565b1415610fd957610fd3878686856113eb565b90955093505b5050600101610ee4565b50828214610fff5760018401805461ffff191661ffff84161790555b600782161561102157600382901c600090815260028501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67387878760405161105493929190611d08565b60405180910390a16110668686611626565b50505050505050565b60007f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890610e63565b6110a033611723565b7f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890805473ffffffffffffffffffffffffffffffffffffffff19169055565b7f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038316179055610b4d8181565b805160009081906001600160a01b03163014801590611154575082516001600160a01b03163b155b1561117257604051633ddc5cab60e21b815260040160405180910390fd5b60005b83604001515181101561127c5760008460400151828151811061119a5761119a611c60565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c156111ff576040517f92474ee200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85516001600160e01b0319838116600081815260208d90526040902060609390931b6bffffffffffffffffffffffff19168b1790925560058a901b60e090811692831c91831c1999909916179781141561126d57600389901c600090815260028b0160205260408120989098555b50505060019586019501611175565b5093959294509192505050565b80516001600160a01b03163b6112b257604051633ddc5cab60e21b815260040160405180910390fd5b60005b8160400151518110156113e6576000826040015182815181106112da576112da611c60565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c80611326576040516337e25a9760e11b815260040160405180910390fd5b6001600160a01b0381163014156113505760405163e983573160e01b815260040160405180910390fd5b84516001600160a01b0382811691161415611397576040517f617557e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5083516001600160e01b031992909216600090815260208690526040902060609290921b6bffffffffffffffffffffffff19166bffffffffffffffffffffffff919091161790556001016112b5565b505050565b805160009081906001600160a01b031615611432576040517feacd242400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600385901c6007861660005b8560400151518110156116125760008660400151828151811061146357611463611c60565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c6114ae576040516337e25a9760e11b815260040160405180910390fd5b606081901c3014156114d35760405163e983573160e01b815260040160405180910390fd5b886114fb57600019909401600081815260028c01602052604090205498509360079350611503565b600019909301925b600584901b89901b6000806001600160e01b03198084169086161461155f576001600160e01b03198316600090815260208f90526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff86161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b168782146115c257600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c1790556115e6565b80836001600160e01b031916901c816001600160e01b031960001b901c198d16179b505b8661160157600088815260028f01602052604081208190559b505b50506001909301925061143e915050565b5060039190911b1796939550929350505050565b8051156001600160a01b038316151461166b576040517f26df4ccd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0382161561171f576001600160a01b03821630146116b2576001600160a01b0382163b6116b257604051633ddc5cab60e21b815260040160405180910390fd5b6000826001600160a01b0316826040516116cc9190611dd1565b600060405180830381855af49150503d8060008114611707576040519150601f19603f3d011682016040523d82523d6000602084013e61170c565b606091505b50509050806113e6573d6000803e3d6000fd5b5050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046080546040516001600160a01b038481169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b80356001600160e01b0319811681146117c257600080fd5b919050565b6000602082840312156117d957600080fd5b6117e2826117aa565b9392505050565b80356001600160a01b03811681146117c257600080fd5b60008083601f84011261181257600080fd5b50813567ffffffffffffffff81111561182a57600080fd5b60208301915083602082850101111561184257600080fd5b9250929050565b60008060008060006060868803121561186157600080fd5b853567ffffffffffffffff8082111561187957600080fd5b818801915088601f83011261188d57600080fd5b81358181111561189c57600080fd5b8960208260051b85010111156118b157600080fd5b602083019750809650506118c7602089016117e9565b945060408801359150808211156118dd57600080fd5b506118ea88828901611800565b969995985093965092949392505050565b6020808252825182820181905260009190848201906040850190845b8181101561193c5783516001600160a01b031683529284019291840191600101611917565b50909695505050505050565b600081518084526020808501945080840160005b838110156119825781516001600160e01b0319168752958201959082019060010161195c565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156119fc57888303603f19018552815180516001600160a01b031684528701518784018790526119e987850182611948565b95880195935050908601906001016119b4565b509098975050505050505050565b600060208284031215611a1c57600080fd5b6117e2826117e9565b6020808252825182820181905260009190848201906040850190845b8181101561193c5783516001600160e01b03191683529284019291840191600101611a41565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611aa057611aa0611a67565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611acf57611acf611a67565b604052919050565b600067ffffffffffffffff821115611af157611af1611a67565b5060051b60200190565b6000611b0e611b0984611ad7565b611aa6565b83815260208082019190600586811b860136811115611b2c57600080fd5b865b81811015611c2257803567ffffffffffffffff80821115611b4f5760008081fd5b818a01915060608236031215611b655760008081fd5b611b6d611a7d565b611b76836117e9565b81528683013560038110611b8a5760008081fd5b8188015260408381013583811115611ba25760008081fd5b939093019236601f850112611bb957600092508283fd5b83359250611bc9611b0984611ad7565b83815292871b84018801928881019036851115611be65760008081fd5b948901945b84861015611c0b57611bfc866117aa565b82529489019490890190611beb565b918301919091525088525050948301948301611b2e565b5092979650505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611c5957611c59611c2f565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff811415611c8d57611c8d611c2f565b60010192915050565b634e487b7160e01b600052602160045260246000fd5b60005b83811015611cc7578181015183820152602001611caf565b83811115611cd6576000848401525b50505050565b60008151808452611cf4816020860160208601611cac565b601f01601f19169290920160200192915050565b6000606080830181845280875180835260808601915060808160051b87010192506020808a016000805b84811015611da157898703607f19018652825180516001600160a01b031688528481015160038110611d7257634e487b7160e01b84526021600452602484fd5b88860152604090810151908801899052611d8e89890182611948565b9750509483019491830191600101611d32565b5050506001600160a01b0389169087015250508381036040850152611dc68186611cdc565b979650505050505050565b60008251611de3818460208701611cac565b919091019291505056fea26469706673582212202496459a32e0e8bb499a0dd9e2e867b95134f84bd4a0e8c4a110fe7ae663623164736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "data": "optional initialization function call data",
          "facetCuts": "array of structured Diamond facet update data",
          "target": "optional target of initialization delegatecall"
        }
      },
      "facetAddress(bytes4)": {
        "params": {
          "selector": "function selector to query"
        },
        "returns": {
          "facet": "facet address (zero address if not found)"
        }
      },
      "facetAddresses()": {
        "returns": {
          "addresses": "array of facet addresses"
        }
      },
      "facetFunctionSelectors(address)": {
        "params": {
          "facet": "address of facet to query"
        },
        "returns": {
          "selectors": "array of function selectors"
        }
      },
      "facets()": {
        "returns": {
          "diamondFacets": "array of structured facet data"
        }
      },
      "getFallbackAddress()": {
        "returns": {
          "fallbackAddress": "address of fallback implementation"
        }
      },
      "owner()": {
        "returns": {
          "_0": "conrtact owner"
        }
      },
      "setFallbackAddress(address)": {
        "params": {
          "fallbackAddress": "address of fallback implementation"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "transferOwnership(address)": {
        "params": {
          "account": "address of new owner"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "accept transfer of contract ownership"
      },
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "update diamond facets and optionally execute arbitrary initialization function"
      },
      "facetAddress(bytes4)": {
        "notice": "get the address of the facet associated with given selector"
      },
      "facetAddresses()": {
        "notice": "get addresses of all facets used by diamond"
      },
      "facetFunctionSelectors(address)": {
        "notice": "get all selectors for given facet address"
      },
      "facets()": {
        "notice": "get all facets and their selectors"
      },
      "getFallbackAddress()": {
        "notice": "query the address of the fallback implementation"
      },
      "nomineeOwner()": {
        "notice": "get the nominated owner who has permission to call acceptOwnership"
      },
      "owner()": {
        "notice": "get the ERC173 contract owner"
      },
      "setFallbackAddress(address)": {
        "notice": "set the address of the fallback implementation"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "transferOwnership(address)": {
        "notice": "transfer contract ownership to new account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}